<%
  # TODO: shouldn't this logic happen in the controller action instead of the template?
  # Actually, maybe we should make render :active_scaffold work in the controller, and not even have a _nested.rhtml?

  # This assumes that the association is included as a column in the active_scaffold_config.columns collection
  unless params[:association].nil?
    parent_id = params[:id]
    # find the column and the association
    column = active_scaffold_config.columns[params[:association]]
    association = column.association

    # determine what constraints we need
    @constraints = { association.reverse => parent_id }

    # generate the customized label
    @label = as_(:nested_for_model, :nested_model => active_scaffold_config_for(association.klass).list.label, :parent_model => format_value(@record.to_label))

    begin
      controller = active_scaffold_controller_for(association.klass)
    rescue ActiveScaffold::ControllerNotFound => error
      concat "#{error.class} - #{error.message}"
    else
      concat render(:active_scaffold => controller.controller_path,
        :constraints => @constraints,
        :conditions => association.options[:conditions],
        :label => h(@label),
        :params => {:nested => true, :parent_column => params[:association], :parent_model => association.active_record.name}
      )
    end
  end
%>
